diff --git a/build/secp256k1hdwallet.js b/build/secp256k1hdwallet.js
index 0448cbb..636d2aa 100644
--- a/build/secp256k1hdwallet.js
+++ b/build/secp256k1hdwallet.js
@@ -69,7 +69,7 @@ class Secp256k1HdWallet {
         const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked);
         const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);
         const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;
-        return new Secp256k1HdWallet(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);
+        return new this(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);
     }
     /**
      * Generates a new wallet with a BIP39 mnemonic of the given length.
@@ -82,7 +82,7 @@ class Secp256k1HdWallet {
         const entropyLength = 4 * Math.floor((11 * length) / 33);
         const entropy = crypto_1.Random.getBytes(entropyLength);
         const mnemonic = crypto_1.Bip39.encode(entropy);
-        return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), hdPath, prefix);
+        return this.fromMnemonic(mnemonic.toString(), hdPath, prefix);
     }
     /**
      * Restores a wallet from an encrypted serialization.
@@ -96,7 +96,7 @@ class Secp256k1HdWallet {
             throw new Error("Root document is not an object.");
         switch (root.type) {
             case serializationTypeV1:
-                return Secp256k1HdWallet.deserializeTypeV1(serialization, password);
+                return this.deserializeTypeV1(serialization, password);
             default:
                 throw new Error("Unsupported serialization type");
         }
@@ -128,7 +128,7 @@ class Secp256k1HdWallet {
                 const account = accounts[0];
                 if (!isDerivationJson(account))
                     throw new Error("Account is not in the correct format.");
-                return Secp256k1HdWallet.fromMnemonic(mnemonic, crypto_1.stringToPath(account.hdPath), account.prefix);
+                return this.fromMnemonic(mnemonic, crypto_1.stringToPath(account.hdPath), account.prefix);
             }
             default:
                 throw new Error("Unsupported serialization type");
@@ -139,7 +139,7 @@ class Secp256k1HdWallet {
         if (!utils_1.isNonNullObject(root))
             throw new Error("Root document is not an object.");
         const encryptionKey = await wallet_1.executeKdf(password, root.kdf);
-        return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);
+        return this.deserializeWithEncryptionKey(serialization, encryptionKey);
     }
     get mnemonic() {
         return this.secret.toString();
